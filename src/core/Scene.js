/**
 * –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ü–µ–Ω–æ–π –∏–≥—Ä—ã
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É 3D —Å—Ü–µ–Ω—ã
 */
export class GameScene {
    constructor(engine, configManager = null) {
        this.engine = engine;
        this.configManager = configManager;
        this.scene = null;
        this.scaleFactor = 10;
        
        this.init();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ü–µ–Ω—ã
     */
    init() {
        if (!this.engine) {
            throw new Error('Engine is required for GameScene initialization');
        }
        
        try {
            this.scene = new BABYLON.Scene(this.engine);
            
            // –í–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–ª–ª–∏–∑–∏–π
            this.scene.collisionsEnabled = true;
            
            // –í–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –¥–≤–∏–∂–∫–∞
            this.scene.enablePhysics(
                new BABYLON.Vector3(0, -9.81, 0), 
                new BABYLON.CannonJSPlugin()
            );
            
            console.log('üåç Game Scene initialized');
        } catch (error) {
            console.error('‚ùå Failed to initialize Game Scene:', error);
            throw error;
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –æ—Å–≤–µ—â–µ–Ω–∏—è
     */
    createLighting() {
        // –û—Å–Ω–æ–≤–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ
        const light = new BABYLON.HemisphericLight(
            "mainLight", 
            new BABYLON.Vector3(1, 1, 0), 
            this.scene
        );
        light.intensity = 0.7;
        
        // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–≤–µ—Ç –¥–ª—è —Ç–µ–Ω–µ–π
        const directionalLight = new BABYLON.DirectionalLight(
            "dirLight", 
            new BABYLON.Vector3(-1, -1, -1), 
            this.scene
        );
        directionalLight.intensity = 0.5;
        
        console.log('üí° Lighting created');
        return { hemispheric: light, directional: directionalLight };
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫–∞–π–±–æ–∫—Å–∞
     */
    createSkybox() {
        const skybox = BABYLON.MeshBuilder.CreateBox(
            "skyBox", 
            { size: 1000.0 * this.scaleFactor }, 
            this.scene
        );
        
        const skyboxMaterial = new BABYLON.StandardMaterial("skyBox", this.scene);
        skyboxMaterial.backFaceCulling = false;
        skyboxMaterial.reflectionTexture = new BABYLON.CubeTexture(
            "https://www.babylonjs-playground.com/textures/skybox", 
            this.scene
        );
        skyboxMaterial.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;
        skyboxMaterial.diffuseColor = new BABYLON.Color3(0, 0, 0);
        skyboxMaterial.specularColor = new BABYLON.Color3(0, 0, 0);
        skybox.material = skyboxMaterial;
        
        console.log('üåå Skybox created');
        return skybox;
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –º–∏—Ä–∞ –∏–∑ GLB —Ñ–∞–π–ª–∞
     */
    async loadWorld(path, filename) {
        try {
            const result = await BABYLON.SceneLoader.ImportMeshAsync(
                "", 
                path, 
                filename, 
                this.scene
            );
            
            const worldMeshes = result.meshes;
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ—à–µ–π –º–∏—Ä–∞
            worldMeshes.forEach((mesh, index) => {
                mesh.checkCollisions = true;
                mesh.scaling.scaleInPlace(this.scaleFactor);
                
                // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                mesh.position.y = 5 * this.scaleFactor;
                
                // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–∑–∏–∫–∏
                if (mesh.geometry || mesh.getTotalVertices() > 0) {
                    const mass = index === 0 ? 1 : 0;
                    const impostorType = index === 0 
                        ? BABYLON.PhysicsImpostor.BoxImpostor 
                        : BABYLON.PhysicsImpostor.MeshImpostor;
                    
                    mesh.physicsImpostor = new BABYLON.PhysicsImpostor(
                        mesh, 
                        impostorType, 
                        { mass: mass, restitution: 0.3 }, 
                        this.scene
                    );
                }
            });
            
            console.log(`üèóÔ∏è World loaded: ${filename}`);
            return worldMeshes;
        } catch (error) {
            console.error('‚ùå Failed to load world:', error);
            return [];
        }
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–∏ –º–∏—Ä–∞
     * @param {Array} worldMeshes - –ú–∞—Å—Å–∏–≤ –º–µ—à–µ–π –º–∏—Ä–∞
     * @param {number} scaleFactor - –ú–∞—Å—à—Ç–∞–±–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä
     */
    setupWorldModel(worldMeshes, scaleFactor) {
        if (!worldMeshes || worldMeshes.length === 0) {
            console.warn('‚ö†Ô∏è No world meshes to setup');
            return;
        }

        worldMeshes.forEach((mesh, index) => {
            if (!mesh) return;

            // –í–∫–ª—é—á–∞–µ–º –∫–æ–ª–ª–∏–∑–∏–∏
            mesh.checkCollisions = true;
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∏–∑–∏–∫—É –µ—Å–ª–∏ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏ —É –º–µ—à–∞ –µ—Å—Ç—å –≥–µ–æ–º–µ—Ç—Ä–∏—è
            if (!mesh.physicsImpostor && mesh.getTotalVertices && mesh.getTotalVertices() > 0) {
                const mass = 0; // –°—Ç–∞—Ç–∏—á–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –º–∏—Ä–∞
                const impostorType = BABYLON.PhysicsImpostor.MeshImpostor;
                
                try {
                    mesh.physicsImpostor = new BABYLON.PhysicsImpostor(
                        mesh, 
                        impostorType, 
                        { mass: mass, restitution: 0.3, friction: 0.8 }, 
                        this.scene
                    );
                    console.log(`‚úÖ Physics impostor created for mesh ${index}`);
                } catch (error) {
                    console.warn(`‚ö†Ô∏è Failed to create physics impostor for mesh ${index}:`, error);
                }
            } else if (!mesh.getTotalVertices || mesh.getTotalVertices() === 0) {
                console.log(`‚ö†Ô∏è Skipping physics for mesh ${index} - no vertices`);
            }
        });

        console.log(`üèóÔ∏è World model setup complete for ${worldMeshes.length} meshes`);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã
     */
    getScene() {
        return this.scene;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–Ω–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞
     */
    getScaleFactor() {
        return this.scaleFactor;
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞—Å—à—Ç–∞–±–Ω–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞
     */
    setScaleFactor(factor) {
        this.scaleFactor = factor;
    }
    
    /**
     * –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    dispose() {
        if (this.scene) {
            // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            this.scene.meshes.forEach(mesh => {
                if (mesh.physicsImpostor) {
                    try {
                        mesh.physicsImpostor.dispose();
                        mesh.physicsImpostor = null;
                    } catch (error) {
                        console.warn('‚ö†Ô∏è Error disposing physics impostor:', error);
                    }
                }
            });
            
            this.scene.dispose();
        }
        console.log('üóëÔ∏è Game Scene disposed');
    }
}