/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–≤–∏–∂–∫–∞ –∏–≥—Ä—ã
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π Babylon.js –∏ –æ—Å–Ω–æ–≤–Ω—ã–º —Ü–∏–∫–ª–æ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
 */
export class GameEngine {
    constructor(canvasId) {
        this.canvas = document.getElementById(canvasId);
        this.engine = null;
        this.scene = null;
        this.isRunning = false;
        
        this.init();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞
     */
    init() {
        try {
            if (!this.canvas) {
                throw new Error('Canvas element not found');
            }
            
            this.engine = new BABYLON.Engine(this.canvas, true, {
                preserveDrawingBuffer: true,
                stencil: true,
                antialias: true
            });
            
            if (!this.engine) {
                throw new Error('Failed to create Babylon.js engine');
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
            window.addEventListener('resize', () => {
                if (this.engine) {
                    this.engine.resize();
                }
            });
            
            console.log('‚úÖ Game Engine initialized successfully');
        } catch (error) {
            console.error('‚ùå Failed to initialize Game Engine:', error);
            throw error;
        }
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ü–µ–Ω—ã
     * @param {BABYLON.Scene} scene - –°—Ü–µ–Ω–∞ Babylon.js
     */
    setScene(scene) {
        this.scene = scene;
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
     */
    start() {
        if (!this.scene) {
            console.error('‚ùå Cannot start engine: No scene set');
            return;
        }
        
        this.isRunning = true;
        
        this.engine.runRenderLoop(() => {
            if (this.scene && this.isRunning) {
                this.scene.render();
            }
        });
        
        console.log('üöÄ Game Engine started');
    }
    
    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–≤–∏–∂–∫–∞
     */
    stop() {
        this.isRunning = false;
        console.log('‚èπÔ∏è Game Engine stopped');
    }
    
    /**
     * –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –¥–≤–∏–∂–∫–∞
     */
    resize() {
        if (this.engine) {
            this.engine.resize();
        }
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
     */
    runRenderLoop(callback) {
        if (this.engine) {
            this.engine.runRenderLoop(callback);
        }
    }
    
    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–∏–∫–ª–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
     */
    stopRenderLoop() {
        if (this.engine) {
            this.engine.stopRenderLoop();
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Babylon.js –¥–≤–∏–∂–∫–∞
     */
    getEngine() {
        return this.engine;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    getPerformanceInfo() {
        if (!this.engine) return null;
        
        return {
            fps: this.engine.getFps(),
            deltaTime: this.engine.getDeltaTime(),
            drawCalls: this.scene ? this.scene.getActiveMeshes().length : 0
        };
    }
    
    /**
     * –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    dispose() {
        if (this.scene) {
            this.scene.dispose();
        }
        if (this.engine) {
            this.engine.dispose();
        }
        console.log('üóëÔ∏è Game Engine disposed');
    }
}