/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –≤–≤–æ–¥–∞
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –º—ã—à—å –∏ –¥—Ä—É–≥–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–≤–æ–¥–∞
 */
export class InputManager {
    constructor(canvas, configManager) {
        this.canvas = canvas;
        this.config = configManager;
        
        // –ö–∞—Ä—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
        this.keyMap = {};
        this.mouseMap = {};
        this.mousePosition = { x: 0, y: 0 };
        this.mouseDelta = { x: 0, y: 0 };
        this.wheelDelta = 0;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        this.mouseSensitivity = this.config.get('controls.mouseSensitivity');
        this.invertY = this.config.get('controls.invertY');
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ
        this.isPointerLocked = false;
        this.isEnabled = true;
        
        this.init();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    init() {
        this.setupKeyboardEvents();
        this.setupMouseEvents();
        this.setupPointerLock();
        
        console.log('üéÆ Input manager initialized');
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
     */
    setupKeyboardEvents() {
        document.addEventListener('keydown', (event) => {
            if (!this.isEnabled) return;
            
            const key = event.code;
            this.keyMap[key] = true;
            
            // –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏–≥—Ä–æ–≤—ã—Ö –∫–ª–∞–≤–∏—à
            if (this.isGameKey(key)) {
                console.log(`üéÆ Game key pressed: ${key}`);
                event.preventDefault();
            }
        });
        
        document.addEventListener('keyup', (event) => {
            if (!this.isEnabled) return;
            
            const key = event.code;
            this.keyMap[key] = false;
            
            // –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏–≥—Ä–æ–≤—ã—Ö –∫–ª–∞–≤–∏—à
            if (this.isGameKey(key)) {
                console.log(`üéÆ Game key released: ${key}`);
            }
        });
        
        // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
        window.addEventListener('blur', () => {
            this.keyMap = {};
        });
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏
     */
    setupMouseEvents() {
        // –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –º—ã—à–∏
        this.canvas.addEventListener('mousedown', (event) => {
            if (!this.isEnabled) return;
            
            this.mouseMap[event.button] = true;
            event.preventDefault();
        });
        
        this.canvas.addEventListener('mouseup', (event) => {
            if (!this.isEnabled) return;
            
            this.mouseMap[event.button] = false;
            event.preventDefault();
        });
        
        // –î–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏
        this.canvas.addEventListener('mousemove', (event) => {
            if (!this.isEnabled) return;
            
            this.mousePosition.x = event.clientX;
            this.mousePosition.y = event.clientY;
            
            if (this.isPointerLocked) {
                this.mouseDelta.x = event.movementX * this.mouseSensitivity;
                this.mouseDelta.y = event.movementY * this.mouseSensitivity * (this.invertY ? -1 : 1);
            }
        });
        
        // –ö–æ–ª–µ—Å–æ –º—ã—à–∏
        this.canvas.addEventListener('wheel', (event) => {
            if (!this.isEnabled) return;
            
            this.wheelDelta = event.deltaY;
            event.preventDefault();
        });
        
        // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        this.canvas.addEventListener('contextmenu', (event) => {
            event.preventDefault();
        });
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —É–∫–∞–∑–∞—Ç–µ–ª—è
     */
    setupPointerLock() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        document.addEventListener('pointerlockchange', () => {
            this.isPointerLocked = document.pointerLockElement === this.canvas;
        });
        
        document.addEventListener('pointerlockerror', () => {
            console.warn('‚ö†Ô∏è Pointer lock failed');
            this.isPointerLocked = false;
        });
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–ª–∞–≤–∏—à–∞ –∏–≥—Ä–æ–≤–æ–π
     * @param {string} key - –ö–æ–¥ –∫–ª–∞–≤–∏—à–∏
     */
    isGameKey(key) {
        const gameKeys = [
            this.config.get('controls.keyBindings.forward'),
            this.config.get('controls.keyBindings.backward'),
            this.config.get('controls.keyBindings.left'),
            this.config.get('controls.keyBindings.right'),
            this.config.get('controls.keyBindings.jump'),
            this.config.get('controls.keyBindings.crouch'),
            this.config.get('controls.keyBindings.run'),
            'Space', 'Tab', 'Escape'
        ];
        
        return gameKeys.includes(key);
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏
     * @param {string} key - –ö–æ–¥ –∫–ª–∞–≤–∏—à–∏
     */
    isKeyPressed(key) {
        return !!this.keyMap[key];
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏
     * @param {number} button - –ù–æ–º–µ—Ä –∫–Ω–æ–ø–∫–∏ (0 - –ª–µ–≤–∞—è, 1 - —Å—Ä–µ–¥–Ω—è—è, 2 - –ø—Ä–∞–≤–∞—è)
     */
    isMousePressed(button) {
        return !!this.mouseMap[button];
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –Ω–∞–∂–∞—Ç—ã—Ö –∫–ª–∞–≤–∏—à
     */
    getKeyMap() {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∂–∞—Ç—ã–µ –∫–ª–∞–≤–∏—à–∏ (true –∑–Ω–∞—á–µ–Ω–∏—è)
        const pressedKeys = {};
        for (const [key, pressed] of Object.entries(this.keyMap)) {
            if (pressed) {
                pressedKeys[key] = true;
            }
        }
        return pressedKeys;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –º—ã—à–∏
     */
    getMousePosition() {
        return { ...this.mousePosition };
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–ª—å—Ç—ã –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
     */
    getMouseDelta() {
        const delta = { ...this.mouseDelta };
        this.mouseDelta.x = 0;
        this.mouseDelta.y = 0;
        return delta;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–ª—å—Ç—ã –∫–æ–ª–µ—Å–∞ –º—ã—à–∏
     */
    getWheelDelta() {
        const delta = this.wheelDelta;
        this.wheelDelta = 0;
        return delta;
    }
    
    /**
     * –ó–∞–ø—Ä–æ—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —É–∫–∞–∑–∞—Ç–µ–ª—è
     */
    requestPointerLock() {
        if (!this.isPointerLocked) {
            this.canvas.requestPointerLock();
        }
    }
    
    /**
     * –í—ã—Ö–æ–¥ –∏–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —É–∫–∞–∑–∞—Ç–µ–ª—è
     */
    exitPointerLock() {
        if (this.isPointerLocked) {
            document.exitPointerLock();
        }
    }
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —É–∫–∞–∑–∞—Ç–µ–ª—è
     */
    togglePointerLock() {
        if (this.isPointerLocked) {
            this.exitPointerLock();
        } else {
            this.requestPointerLock();
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —É–∫–∞–∑–∞—Ç–µ–ª—è
     */
    getIsPointerLocked() {
        return this.isPointerLocked;
    }
    
    /**
     * –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞
     * @param {boolean} enabled - –í–∫–ª—é—á–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
     */
    setEnabled(enabled) {
        this.isEnabled = enabled;
        
        if (!enabled) {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            this.keyMap = {};
            this.mouseMap = {};
            this.mouseDelta.x = 0;
            this.mouseDelta.y = 0;
            this.wheelDelta = 0;
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞
     */
    getIsEnabled() {
        return this.isEnabled;
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    updateFromConfig() {
        this.mouseSensitivity = this.config.get('controls.mouseSensitivity');
        this.invertY = this.config.get('controls.invertY');
    }
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–ª–∞–≤–∏—à
     * @param {string} key - –ö–æ–¥ –∫–ª–∞–≤–∏—à–∏
     * @param {Function} callback - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
     * @param {string} type - –¢–∏–ø —Å–æ–±—ã—Ç–∏—è ('keydown' –∏–ª–∏ 'keyup')
     */
    addKeyHandler(key, callback, type = 'keydown') {
        const handler = (event) => {
            if (event.code === key && this.isEnabled) {
                callback(event);
            }
        };
        
        document.addEventListener(type, handler);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        return () => {
            document.removeEventListener(type, handler);
        };
    }
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –º—ã—à–∏
     * @param {string} event - –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
     * @param {Function} callback - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
     */
    addMouseHandler(event, callback) {
        const handler = (e) => {
            if (this.isEnabled) {
                callback(e);
            }
        };
        
        this.canvas.addEventListener(event, handler);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        return () => {
            this.canvas.removeEventListener(event, handler);
        };
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤–≤–æ–¥–∞
     */
    getInputState() {
        return {
            keys: { ...this.keyMap },
            mouse: {
                buttons: { ...this.mouseMap },
                position: { ...this.mousePosition },
                delta: { ...this.mouseDelta }
            },
            wheel: this.wheelDelta,
            pointerLocked: this.isPointerLocked,
            enabled: this.isEnabled
        };
    }
    
    /**
     * –°–±—Ä–æ—Å –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤–≤–æ–¥–∞
     */
    reset() {
        this.keyMap = {};
        this.mouseMap = {};
        this.mousePosition = { x: 0, y: 0 };
        this.mouseDelta = { x: 0, y: 0 };
        this.wheelDelta = 0;
    }
    
    /**
     * –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    dispose() {
        this.setEnabled(false);
        this.exitPointerLock();
        console.log('üóëÔ∏è Input manager disposed');
    }
}