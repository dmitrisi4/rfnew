/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∫–∞–º–µ—Ä—ã
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ä–µ–∂–∏–º–∞–º–∏ –∫–∞–º–µ—Ä—ã –∏ –∏—Ö –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º
 */
export class CameraController {
    constructor(scene, canvas, configManager) {
        this.scene = scene;
        this.canvas = canvas;
        this.config = configManager;
        
        this.cameras = {};
        this.currentCamera = null;
        this.currentMode = 'arcRotate';
        this.target = null;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã
        this.mouseSensitivity = this.config.get('camera.mouseSensitivity');
        this.zoomSensitivity = this.config.get('camera.zoomSensitivity');
        this.smoothing = this.config.get('camera.smoothing');
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–≤–∏—à –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä–æ–π
        this.keyState = {
            ArrowLeft: false,
            ArrowRight: false,
            ArrowUp: false,
            ArrowDown: false
        };
        
        this.init();
        this.setupKeyboardControls();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–º–µ—Ä
     */
    init() {
        this.createArcRotateCamera();
        this.createFreeCamera();
        this.createFollowCamera();
        
        this.setActiveCamera('arcRotate');
        
        console.log('üì∑ Camera controller initialized');
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä–æ–π —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
     */
    setupKeyboardControls() {
        document.addEventListener('keydown', (event) => {
            if (event.code in this.keyState) {
                this.keyState[event.code] = true;
                event.preventDefault();
            }
        });
        
        document.addEventListener('keyup', (event) => {
            if (event.code in this.keyState) {
                this.keyState[event.code] = false;
                event.preventDefault();
            }
        });
        
        // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
        window.addEventListener('blur', () => {
            Object.keys(this.keyState).forEach(key => {
                this.keyState[key] = false;
            });
        });
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ ArcRotate –∫–∞–º–µ—Ä—ã (–æ—Ä–±–∏—Ç–∞–ª—å–Ω–∞—è)
     */
    createArcRotateCamera() {
        const camera = new BABYLON.ArcRotateCamera(
            "arcRotateCamera",
            -Math.PI / 2, // –£–≥–æ–ª –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
            Math.PI / 3,  // –£–≥–æ–ª –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ (–±–æ–ª–µ–µ –ø–æ–ª–æ–≥–∏–π)
            15,           // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–±–ª–∏–∂–µ –∫ –æ–±—ä–µ–∫—Ç—É)
            new BABYLON.Vector3(0, 2, 0), // –¶–µ–ª—å –Ω–∞ –≤—ã—Å–æ—Ç–µ –∏–≥—Ä–æ–∫–∞
            this.scene
        );
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        camera.attachControl(this.canvas, true);
        camera.setTarget(new BABYLON.Vector3(0, 2, 0));
        
        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        camera.lowerBetaLimit = 0.1;
        camera.upperBetaLimit = Math.PI / 2;
        camera.lowerRadiusLimit = 3;  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
        camera.upperRadiusLimit = 100; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        camera.angularSensibilityX = 1000 / this.mouseSensitivity;
        camera.angularSensibilityY = 1000 / this.mouseSensitivity;
        camera.wheelPrecision = 50 / this.zoomSensitivity;
        
        // –ò–Ω–µ—Ä—Ü–∏—è
        camera.inertia = this.smoothing;
        
        console.log('üì∑ ArcRotate camera: positioned closer to player level');
        this.cameras.arcRotate = camera;
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ Free –∫–∞–º–µ—Ä—ã (–æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞)
     */
    createFreeCamera() {
        const camera = new BABYLON.FreeCamera(
            "freeCamera",
            new BABYLON.Vector3(0, 3, -8), // –ë–ª–∏–∂–µ –∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –∏–≥—Ä–æ–∫–∞
            this.scene
        );
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        camera.attachControl(this.canvas, true);
        camera.setTarget(new BABYLON.Vector3(0, 2, 0)); // –°–º–æ—Ç—Ä–∏–º –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä–æ–∫–∞
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–≤–∏–∂–µ–Ω–∏—è
        camera.speed = this.config.get('camera.moveSpeed');
        camera.angularSensibility = 1000 / this.mouseSensitivity;
        
        // –ò–Ω–µ—Ä—Ü–∏—è
        camera.inertia = this.smoothing;
        
        // –ö–æ–ª–ª–∏–∑–∏–∏
        camera.checkCollisions = true;
        camera.ellipsoid = new BABYLON.Vector3(1, 1, 1);
        
        console.log('üì∑ Free camera: positioned at player level');
        this.cameras.free = camera;
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ Follow –∫–∞–º–µ—Ä—ã (—Å–ª–µ–¥—è—â–∞—è –∑–∞ –∏–≥—Ä–æ–∫–æ–º)
     */
    createFollowCamera() {
        const camera = new BABYLON.FollowCamera(
            "followCamera",
            new BABYLON.Vector3(0, 10, -10),
            this.scene
        );
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        camera.radius = 15;
        camera.heightOffset = 8;
        camera.rotationOffset = 0;
        camera.cameraAcceleration = 0.05;
        camera.maxCameraSpeed = 10;
        
        this.cameras.follow = camera;
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞–º–µ—Ä—ã
     * @param {string} mode - –†–µ–∂–∏–º –∫–∞–º–µ—Ä—ã ('arcRotate', 'free', 'follow')
     */
    setActiveCamera(mode) {
        if (!this.cameras[mode]) {
            console.warn(`‚ö†Ô∏è Camera mode '${mode}' not found`);
            return;
        }
        
        // –û—Ç–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞–º–µ—Ä—É
        if (this.currentCamera) {
            this.currentCamera.detachControl(this.canvas);
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –∫–∞–º–µ—Ä—É
        this.currentCamera = this.cameras[mode];
        this.currentMode = mode;
        this.scene.activeCamera = this.currentCamera;
        
        // –í–∫–ª—é—á–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –∫–∞–º–µ—Ä—ã
        if (mode !== 'follow') {
            this.currentCamera.attachControl(this.canvas, true);
        }
        
        console.log(`üì∑ Camera switched to ${mode} mode`);
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏ –¥–ª—è –∫–∞–º–µ—Ä—ã
     * @param {BABYLON.Vector3|BABYLON.Mesh} target - –¶–µ–ª—å –¥–ª—è –∫–∞–º–µ—Ä—ã
     */
    setTarget(target) {
        this.target = target;
        
        if (this.currentMode === 'arcRotate') {
            const position = target instanceof BABYLON.Vector3 ? target : target.position;
            this.cameras.arcRotate.setTarget(position);
        } else if (this.currentMode === 'follow' && target instanceof BABYLON.Mesh) {
            this.cameras.follow.lockedTarget = target;
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
     * @param {Object} player - –û–±—ä–µ–∫—Ç –∏–≥—Ä–æ–∫–∞
     * @param {number} deltaTime - –í—Ä–µ–º—è –∫–∞–¥—Ä–∞
     * @param {Object} inputManager - –ú–µ–Ω–µ–¥–∂–µ—Ä –≤–≤–æ–¥–∞
     */
    update(player, deltaTime, inputManager = null) {
        if (!player) return;
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ–ª–∫–∞–º–∏
        this.handleKeyboardInput(deltaTime, inputManager);
        
        const playerPosition = player.getPosition();
        
        switch (this.currentMode) {
            case 'arcRotate':
                this.updateArcRotateCamera(playerPosition);
                break;
            case 'free':
                this.updateFreeCamera(playerPosition);
                break;
            case 'follow':
                this.updateFollowCamera(player);
                break;
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä–æ–π
     * @param {number} deltaTime - –í—Ä–µ–º—è –∫–∞–¥—Ä–∞
     * @param {Object} inputManager - –ú–µ–Ω–µ–¥–∂–µ—Ä –≤–≤–æ–¥–∞
     */
    handleKeyboardInput(deltaTime, inputManager = null) {
        if (!this.currentCamera) return;
        
        const rotationSpeed = 2.0 * deltaTime; // –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ–≤–æ—Ä–æ—Ç–∞
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º InputManager –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π keyState
        const isArrowLeftPressed = inputManager ? inputManager.isKeyPressed('ArrowLeft') : this.keyState.ArrowLeft;
        const isArrowRightPressed = inputManager ? inputManager.isKeyPressed('ArrowRight') : this.keyState.ArrowRight;
        const isArrowUpPressed = inputManager ? inputManager.isKeyPressed('ArrowUp') : this.keyState.ArrowUp;
        const isArrowDownPressed = inputManager ? inputManager.isKeyPressed('ArrowDown') : this.keyState.ArrowDown;
        
        if (this.currentMode === 'arcRotate') {
            const camera = this.cameras.arcRotate;
            
            if (isArrowLeftPressed) {
                camera.alpha -= rotationSpeed;
            }
            if (isArrowRightPressed) {
                camera.alpha += rotationSpeed;
            }
            if (isArrowUpPressed) {
                camera.beta = Math.max(camera.lowerBetaLimit, camera.beta - rotationSpeed);
            }
            if (isArrowDownPressed) {
                camera.beta = Math.min(camera.upperBetaLimit, camera.beta + rotationSpeed);
            }
        } else if (this.currentMode === 'free') {
            const camera = this.cameras.free;
            
            if (isArrowLeftPressed) {
                camera.rotation.y -= rotationSpeed;
            }
            if (isArrowRightPressed) {
                camera.rotation.y += rotationSpeed;
            }
            if (isArrowUpPressed) {
                camera.rotation.x = Math.max(-Math.PI/2, camera.rotation.x - rotationSpeed);
            }
            if (isArrowDownPressed) {
                camera.rotation.x = Math.min(Math.PI/2, camera.rotation.x + rotationSpeed);
            }
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–±–∏—Ç–∞–ª—å–Ω–æ–π –∫–∞–º–µ—Ä—ã
     */
    updateArcRotateCamera(playerPosition) {
        // –ü–ª–∞–≤–Ω–æ–µ —Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞ –∏–≥—Ä–æ–∫–æ–º
        const camera = this.cameras.arcRotate;
        const currentTarget = camera.getTarget();
        const targetPosition = playerPosition.clone();
        
        // –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –∫ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
        const lerpFactor = 0.05;
        const newTarget = BABYLON.Vector3.Lerp(currentTarget, targetPosition, lerpFactor);
        camera.setTarget(newTarget);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–π –∫–∞–º–µ—Ä—ã
     */
    updateFreeCamera(playerPosition) {
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        // –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥—è—â–µ–π –∫–∞–º–µ—Ä—ã
     */
    updateFollowCamera(player) {
        const camera = this.cameras.follow;
        if (!camera.lockedTarget) {
            camera.lockedTarget = player.getMesh();
        }
    }
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –∫–∞–º–µ—Ä—ã
     */
    toggleCameraMode() {
        const modes = ['arcRotate', 'free', 'follow'];
        const currentIndex = modes.indexOf(this.currentMode);
        const nextIndex = (currentIndex + 1) % modes.length;
        const nextMode = modes[nextIndex];
        
        this.setActiveCamera(nextMode);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª—å –¥–ª—è –Ω–æ–≤–æ–π –∫–∞–º–µ—Ä—ã
        if (this.target) {
            this.setTarget(this.target);
        }
        
        return nextMode;
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–º–µ—Ä—ã
     * @param {BABYLON.Vector3} position - –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
     */
    setPosition(position) {
        if (this.currentCamera) {
            this.currentCamera.position.copyFrom(position);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–∞–º–µ—Ä—ã
     */
    getCurrentCamera() {
        return this.currentCamera;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
     */
    getCurrentMode() {
        return this.currentMode;
    }
    
    /**
     * –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—ã—à—å—é
     * @param {boolean} enabled - –í–∫–ª—é—á–∏—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
     */
    setMouseControl(enabled) {
        if (this.currentCamera && this.currentMode !== 'follow') {
            if (enabled) {
                this.currentCamera.attachControl(this.canvas, true);
            } else {
                this.currentCamera.detachControl(this.canvas);
            }
        }
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–ª—å–Ω–µ–≥–æ –∑—É–º–∞
     * @param {boolean} farZoom - –í–∫–ª—é—á–∏—Ç—å –¥–∞–ª—å–Ω–∏–π –∑—É–º
     */
    setFarZoom(farZoom) {
        if (this.currentMode === 'arcRotate') {
            const camera = this.cameras.arcRotate;
            if (farZoom) {
                camera.radius = Math.min(camera.radius * 2, camera.upperRadiusLimit);
            } else {
                camera.radius = Math.max(camera.radius / 2, camera.lowerRadiusLimit);
            }
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    updateFromConfig() {
        this.mouseSensitivity = this.config.get('camera.mouseSensitivity');
        this.zoomSensitivity = this.config.get('camera.zoomSensitivity');
        this.smoothing = this.config.get('camera.smoothing');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Å–µ—Ö –∫–∞–º–µ—Ä
        Object.values(this.cameras).forEach(camera => {
            if (camera.angularSensibilityX !== undefined) {
                camera.angularSensibilityX = 1000 / this.mouseSensitivity;
                camera.angularSensibilityY = 1000 / this.mouseSensitivity;
            }
            if (camera.angularSensibility !== undefined) {
                camera.angularSensibility = 1000 / this.mouseSensitivity;
            }
            if (camera.wheelPrecision !== undefined) {
                camera.wheelPrecision = 50 / this.zoomSensitivity;
            }
            if (camera.inertia !== undefined) {
                camera.inertia = this.smoothing;
            }
            if (camera.speed !== undefined) {
                camera.speed = this.config.get('camera.moveSpeed');
            }
        });
    }
    
    /**
     * –°–±—Ä–æ—Å –∫–∞–º–µ—Ä—ã –∫ –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
     */
    reset() {
        switch (this.currentMode) {
            case 'arcRotate':
                const arcCamera = this.cameras.arcRotate;
                arcCamera.alpha = -Math.PI / 2;
                arcCamera.beta = Math.PI / 2.5;
                arcCamera.radius = 50;
                arcCamera.setTarget(BABYLON.Vector3.Zero());
                break;
            case 'free':
                const freeCamera = this.cameras.free;
                freeCamera.position = new BABYLON.Vector3(0, 5, -10);
                freeCamera.setTarget(BABYLON.Vector3.Zero());
                break;
            case 'follow':
                // Follow –∫–∞–º–µ—Ä–∞ —Å–±—Ä–æ—Å–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ü–µ–ª–∏
                break;
        }
    }
    
    /**
     * –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    dispose() {
        Object.values(this.cameras).forEach(camera => {
            camera.dispose();
        });
        console.log('üóëÔ∏è Camera controller disposed');
    }
}