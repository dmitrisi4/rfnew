/**
 * –ö–ª–∞—Å—Å –∏–≥—Ä–æ–∫–∞
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ–º, –¥–≤–∏–∂–µ–Ω–∏–µ–º –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º –∏–≥—Ä–æ–∫–∞
 */
export class Player {
    constructor(scene, configManager, scaleFactor = 10) {
        this.scene = scene;
        this.config = configManager;
        this.scaleFactor = scaleFactor;
        
        this.mesh = null;
        this.position = new BABYLON.Vector3(0, 0, 0);
        this.velocity = new BABYLON.Vector3(0, 0, 0);
        this.verticalVelocity = 0;
        this.isGrounded = false;
        this.isMoving = false;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–≤–∏–∂–µ–Ω–∏—è
        this.playerSpeed = this.config.get('player.speed') * scaleFactor;
        this.jumpForce = this.config.get('player.jumpForce') * scaleFactor;
        this.gravity = this.config.get('physics.gravity') * scaleFactor;
        
        this.init();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–∫–∞
     */
    init() {
        this.createPlayerMesh();
        this.setupPhysics();
        
        console.log('üë§ Player initialized');
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—à–∞ –∏–≥—Ä–æ–∫–∞
     */
    createPlayerMesh() {
        // –°–æ–∑–¥–∞–µ–º —Å—Ñ–µ—Ä—É –∫–∞–∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
        this.mesh = BABYLON.MeshBuilder.CreateSphere(
            "player", 
            { diameter: 0.15 * this.scaleFactor, segments: 32 }, 
            this.scene
        );
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π
        this.mesh.ellipsoid = new BABYLON.Vector3(
            0.075 * this.scaleFactor, 
            0.09 * this.scaleFactor, 
            0.075 * this.scaleFactor
        );
        this.mesh.checkCollisions = true;
        
        // –ú–∞—Ç–µ—Ä–∏–∞–ª –∏–≥—Ä–æ–∫–∞
        const playerMaterial = new BABYLON.StandardMaterial("playerMaterial", this.scene);
        playerMaterial.diffuseColor = new BABYLON.Color3(0.2, 0.6, 1.0);
        playerMaterial.specularColor = new BABYLON.Color3(0.1, 0.1, 0.1);
        this.mesh.material = playerMaterial;
        
        console.log('üé≠ Player mesh created');
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–∑–∏–∫–∏
     */
    setupPhysics() {
        // –û—Ç–∫–ª—é—á–∞–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —Ç–µ–ª–æ –¥–ª—è –∏–≥—Ä–æ–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–ª–ª–∏–∑–∏–∏
        // –§–∏–∑–∏—á–µ—Å–∫–æ–µ —Ç–µ–ª–æ –º–æ–∂–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å moveWithCollisions
        console.log('üîß Player physics: using collision system only (no physics impostor)');
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
     * @param {BABYLON.Vector3} position - –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
     */
    setPosition(position) {
        this.position.copyFrom(position);
        this.mesh.position.copyFrom(position);
    }
    
    /**
     * –ü–æ–∏—Å–∫ –∑–µ–º–ª–∏ –ø–æ–¥ –∏–≥—Ä–æ–∫–æ–º
     * @param {Array} worldMeshes - –ú–µ—à–∏ –º–∏—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–ª–∏–∑–∏–π
     */
    findGround(worldMeshes) {
        const rayOrigin = this.mesh.position.subtract(
            new BABYLON.Vector3(0, this.mesh.ellipsoid.y, 0)
        );
        const ray = new BABYLON.Ray(
            rayOrigin, 
            new BABYLON.Vector3(0, -1, 0), 
            10 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–∞–ª—å–Ω–æ—Å—Ç—å –ª—É—á–∞
        );
        
        const hit = this.scene.pickWithRay(ray, (mesh) => {
            // –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ—à–∏ –º–∏—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
            if (worldMeshes && worldMeshes.length > 0) {
                return worldMeshes.includes(mesh) && mesh.checkCollisions && mesh !== this.mesh;
            }
            // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—é–±—ã–µ –º–µ—à–∏ —Å –∫–æ–ª–ª–∏–∑–∏—è–º–∏ (–≤–∫–ª—é—á–∞—è —Ç–µ—Å—Ç–æ–≤—É—é –ø–ª–æ—Å–∫–æ—Å—Ç—å)
            return mesh.checkCollisions && mesh !== this.mesh && mesh.name !== 'skyBox';
        });
        
        return hit;
    }
    
    /**
     * –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –Ω–∞ –∑–µ–º–ª–µ
     * @param {Array} worldMeshes - –ú–µ—à–∏ –º–∏—Ä–∞
     */
    placeOnGround(worldMeshes) {
        console.log(`üîç Placing player on ground. World meshes count: ${worldMeshes ? worldMeshes.length : 0}`);
        
        if (!worldMeshes || worldMeshes.length === 0) {
            // –ï—Å–ª–∏ –Ω–µ—Ç –º–µ—à–µ–π –º–∏—Ä–∞, —Ä–∞–∑–º–µ—â–∞–µ–º –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏
            const fallbackPosition = new BABYLON.Vector3(-5, 2, 0); // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ª–µ–≤–µ–µ
            this.setPosition(fallbackPosition);
            this.verticalVelocity = 0;
            console.log('‚ö†Ô∏è No world meshes, placed on test ground');
            return;
        }
        
        const startPosition = new BABYLON.Vector3(
            -5, // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ª–µ–≤–µ–µ –ø–æ X
            1000 * this.scaleFactor, 
            0  // –¶–µ–Ω—Ç—Ä –ø–æ Z
        );
        
        // –õ—É—á —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–µ–º–ª–∏
        const groundRay = new BABYLON.Ray(
            startPosition, 
            new BABYLON.Vector3(0, -1, 0), 
            2000 * this.scaleFactor
        );
        
        const groundHit = this.scene.pickWithRay(groundRay, (mesh) => {
            const isWorldMesh = worldMeshes.includes(mesh);
            const hasCollisions = mesh.checkCollisions;
            console.log(`üîç Checking mesh: ${mesh.name}, isWorldMesh: ${isWorldMesh}, hasCollisions: ${hasCollisions}`);
            return isWorldMesh && hasCollisions;
        });
        
        if (groundHit.hit) {
            const groundPosition = groundHit.pickedPoint.add(
                new BABYLON.Vector3(0, this.mesh.ellipsoid.y + 1, 0)
            );
            this.setPosition(groundPosition);
            this.verticalVelocity = 0;
            console.log(`üéØ Player placed on ground at: ${groundPosition.toString()}`);
        } else {
            // –ó–∞–ø–∞—Å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏
            const fallbackPosition = new BABYLON.Vector3(-5, 2, 0); // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ª–µ–≤–µ–µ
            this.setPosition(fallbackPosition);
            this.verticalVelocity = 0;
            console.log('‚ö†Ô∏è Ground not found in world meshes, using fallback position on test ground');
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
     * @param {Object} inputMap - –ö–∞—Ä—Ç–∞ –Ω–∞–∂–∞—Ç—ã—Ö –∫–ª–∞–≤–∏—à
     * @param {BABYLON.Camera} camera - –ö–∞–º–µ—Ä–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
     * @param {Array} worldMeshes - –ú–µ—à–∏ –º–∏—Ä–∞ –¥–ª—è –∫–æ–ª–ª–∏–∑–∏–π
     * @param {number} deltaTime - –í—Ä–µ–º—è –∫–∞–¥—Ä–∞
     * @param {boolean} flyMode - –†–µ–∂–∏–º –ø–æ–ª–µ—Ç–∞
     */
    update(inputMap, camera, worldMeshes, deltaTime, flyMode = false) {
        // –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ inputMap
        const pressedKeys = Object.keys(inputMap).filter(key => inputMap[key]);
        if (pressedKeys.length > 0) {
            console.log(`üéØ Player received input:`, pressedKeys);
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã
        const cameraForward = camera.getDirection(new BABYLON.Vector3(0, 0, 1));
        const cameraRight = camera.getDirection(new BABYLON.Vector3(1, 0, 0));
        const forward = new BABYLON.Vector3(cameraForward.x, 0, cameraForward.z).normalize();
        const right = new BABYLON.Vector3(cameraRight.x, 0, cameraRight.z).normalize();
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
        let moveDirection = BABYLON.Vector3.Zero();
        if (inputMap[this.config.get('controls.keyBindings.forward')]) {
            moveDirection.addInPlace(forward);
        }
        if (inputMap[this.config.get('controls.keyBindings.backward')]) {
            moveDirection.subtractInPlace(forward);
        }
        if (inputMap[this.config.get('controls.keyBindings.left')]) {
            moveDirection.subtractInPlace(right);
        }
        if (inputMap[this.config.get('controls.keyBindings.right')]) {
            moveDirection.addInPlace(right);
        }
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
        if (moveDirection.lengthSquared() > 0) {
            moveDirection.normalize();
            this.mesh.rotation.y = Math.atan2(moveDirection.x, moveDirection.z);
            this.isMoving = true;
        } else {
            this.isMoving = false;
        }
        
        // –í—ã—á–∏—Å–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
        const speed = inputMap[this.config.get('controls.keyBindings.run')] 
            ? this.playerSpeed * 2 
            : this.playerSpeed;
        const horizontalMove = moveDirection.scale(speed * deltaTime);
        
        if (flyMode) {
            this.updateFlyMode(inputMap, horizontalMove, deltaTime);
        } else {
            this.updateNormalMode(inputMap, horizontalMove, worldMeshes, deltaTime);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
        this.position.copyFrom(this.mesh.position);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–ª–µ—Ç–∞
     */
    updateFlyMode(inputMap, horizontalMove, deltaTime) {
        this.mesh.checkCollisions = false;
        
        let verticalMove = 0;
        if (inputMap[this.config.get('controls.keyBindings.jump')]) {
            verticalMove = this.playerSpeed * deltaTime;
        } else if (inputMap[this.config.get('controls.keyBindings.crouch')]) {
            verticalMove = -this.playerSpeed * deltaTime;
        }
        
        const flyMove = new BABYLON.Vector3(
            horizontalMove.x, 
            verticalMove, 
            horizontalMove.z
        );
        this.mesh.position.addInPlace(flyMove);
        this.verticalVelocity = 0;
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ
     */
    updateNormalMode(inputMap, horizontalMove, worldMeshes, deltaTime) {
        this.mesh.checkCollisions = true;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—é
        this.verticalVelocity += this.gravity * deltaTime;
        
        // –û–±—â–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
        const totalMove = new BABYLON.Vector3(
            horizontalMove.x, 
            this.verticalVelocity * deltaTime, 
            horizontalMove.z
        );
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–æ –¥–≤–∏–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        const positionBefore = this.mesh.position.clone();
        
        // –î–≤–∏–∂–µ–Ω–∏–µ —Å –∫–æ–ª–ª–∏–∑–∏—è–º–∏
        this.mesh.moveWithCollisions(totalMove);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–µ–º–ª–∏
        const groundHit = this.findGround(worldMeshes);
        
        if (groundHit.hit) {
            this.isGrounded = true;
            
            if (this.verticalVelocity <= 0) {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–æ—á–Ω–æ –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏
                const newY = groundHit.pickedPoint.y + this.mesh.ellipsoid.y;
                this.mesh.position.y = newY;
                this.verticalVelocity = 0;
                
                // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                if (Math.abs(positionBefore.y - this.mesh.position.y) > 0.1) {
                    console.log(`üîß Ground contact: Y corrected from ${positionBefore.y.toFixed(2)} to ${newY.toFixed(2)}`);
                }
            }
            
            // –ü—Ä—ã–∂–æ–∫
            if (inputMap[this.config.get('controls.keyBindings.jump')]) {
                this.verticalVelocity = this.jumpForce;
                this.isGrounded = false;
            }
        } else {
            this.isGrounded = false;
            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–¥–µ–Ω–∏—è
            if (this.verticalVelocity < -5) {
                console.log(`‚¨áÔ∏è Player falling: Y=${this.mesh.position.y.toFixed(2)}, velocity=${this.verticalVelocity.toFixed(2)}`);
            }
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
     */
    getPosition() {
        return this.position.clone();
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—à–∞ –∏–≥—Ä–æ–∫–∞
     */
    getMesh() {
        return this.mesh;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–≤–∏–∂–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫
     */
    getIsMoving() {
        return this.isMoving;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞ –∑–µ–º–ª–µ –ª–∏ –∏–≥—Ä–æ–∫
     */
    getIsGrounded() {
        return this.isGrounded;
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    updateFromConfig() {
        this.playerSpeed = this.config.get('player.speed') * this.scaleFactor;
        this.jumpForce = this.config.get('player.jumpForce') * this.scaleFactor;
        this.gravity = this.config.get('physics.gravity') * this.scaleFactor;
    }
    
    /**
     * –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    dispose() {
        if (this.mesh) {
            // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ–ª–∞
            if (this.mesh.physicsImpostor) {
                this.mesh.physicsImpostor.dispose();
                this.mesh.physicsImpostor = null;
            }
            this.mesh.dispose();
        }
        console.log('üóëÔ∏è Player disposed');
    }
}